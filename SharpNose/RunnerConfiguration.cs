//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;

namespace SharpNose
{
    /// <summary>
    /// The RunnerConfiguration Configuration Element.
    /// </summary>
    public class RunnerConfiguration : ConfigurationElement
    {
        #region IsReadOnly override

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        #endregion

        #region Name Property

        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            NamePropertyName = "name";

        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [Description("The Name.")]
        [ConfigurationProperty(NamePropertyName, IsRequired = true, IsKey = true, IsDefaultCollection = false)]
        public string Name
        {
            get { return ((string) (base[NamePropertyName])); }
            set { base[NamePropertyName] = value; }
        }

        #endregion

        #region Path Property

        /// <summary>
        /// The XML name of the <see cref="Path"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            PathPropertyName = "path";

        /// <summary>
        /// Gets or sets the Path.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [Description("The Path.")]
        [ConfigurationProperty(PathPropertyName, IsRequired = true, IsKey = false, IsDefaultCollection = false)]
        public string Path
        {
            get { return ((string) (base[PathPropertyName])); }
            set { base[PathPropertyName] = value; }
        }

        #endregion

        #region AdditionalArguments Property

        /// <summary>
        /// The XML name of the <see cref="AdditionalArguments"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            AdditionalArgumentsPropertyName = "additionalArguments";

        /// <summary>
        /// Gets or sets the AdditionalArguments.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [Description("The AdditionalArguments.")]
        [ConfigurationProperty(AdditionalArgumentsPropertyName, IsRequired = false, IsKey = false,
            IsDefaultCollection = false)]
        public string AdditionalArguments
        {
            get { return ((string) (base[AdditionalArgumentsPropertyName])); }
            set { base[AdditionalArgumentsPropertyName] = value; }
        }

        #endregion
    }
}

namespace SharpNose
{
    /// <summary>
    /// A collection of RunnerConfiguration instances.
    /// </summary>
    [ConfigurationCollection(typeof (RunnerConfiguration),
        CollectionType = ConfigurationElementCollectionType.BasicMapAlternate,
        AddItemName = RunnerConfigurationPropertyName)]
    public class RunnerConfigurations : ConfigurationElementCollection
    {
        #region Constants

        /// <summary>
        /// The XML name of the individual <see cref="RunnerConfiguration"/> instances in this collection.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            RunnerConfigurationPropertyName = "testRunner";

        #endregion

        #region Overrides

        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override ConfigurationElementCollectionType CollectionType
        {
            get { return ConfigurationElementCollectionType.BasicMapAlternate; }
        }

        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override string ElementName
        {
            get { return RunnerConfigurationPropertyName; }
        }

        /// <summary>
        /// Indicates whether the specified <see cref="ConfigurationElement"/> exists in the <see cref="ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == RunnerConfigurationPropertyName);
        }

        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="ConfigurationElement"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((RunnerConfiguration) (element)).Name;
        }

        /// <summary>
        /// Creates a new <see cref="RunnerConfiguration"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="RunnerConfiguration"/>.
        /// </returns>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        protected override ConfigurationElement CreateNewElement()
        {
            return new RunnerConfiguration();
        }

        #endregion

        #region Indexer

        /// <summary>
        /// Gets the <see cref="RunnerConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="RunnerConfiguration"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public RunnerConfiguration this[int index]
        {
            get { return ((RunnerConfiguration) (base.BaseGet(index))); }
        }

        /// <summary>
        /// Gets the <see cref="RunnerConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="RunnerConfiguration"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public RunnerConfiguration this[object name]
        {
            get { return ((RunnerConfiguration) (base.BaseGet(name))); }
        }

        #endregion

        #region Add

        /// <summary>
        /// Adds the specified <see cref="global::SharpNose.RunnerConfiguration"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testRunner">The <see cref="global::SharpNose.RunnerConfiguration"/> to add.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Add(RunnerConfiguration testRunner)
        {
            base.BaseAdd(testRunner);
        }

        #endregion

        #region Remove

        /// <summary>
        /// Removes the specified <see cref="global::SharpNose.RunnerConfiguration"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="testRunner">The <see cref="RunnerConfiguration"/> to remove.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public void Remove(RunnerConfiguration testRunner)
        {
            base.BaseRemove(GetElementKey(testRunner));
        }

        #endregion

        #region GetItem

        /// <summary>
        /// Gets the <see cref="RunnerConfiguration"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="RunnerConfiguration"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public RunnerConfiguration GetItemAt(int index)
        {
            return ((RunnerConfiguration) (base.BaseGet(index)));
        }

        /// <summary>
        /// Gets the <see cref="RunnerConfiguration"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="RunnerConfiguration"/> to retrieve.</param>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public RunnerConfiguration GetItemByKey(string name)
        {
            return ((RunnerConfiguration) (base.BaseGet(((name)))));
        }

        #endregion

        #region IsReadOnly override

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        #endregion
    }
}

namespace SharpNose
{
    /// <summary>
    /// The Plugins Configuration Section.
    /// </summary>
    public class Plugins : ConfigurationSection
    {
        #region Singleton Instance

        /// <summary>
        /// The XML name of the Plugins Configuration Section.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            PluginsSectionName = "plugins";

        /// <summary>
        /// Gets the Plugins instance.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public static Plugins Instance
        {
            get { return ((Plugins) (ConfigurationManager.GetSection(PluginsSectionName))); }
        }

        #endregion

        #region Xmlns Property

        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            XmlnsPropertyName = "xmlns";

        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [ConfigurationProperty(XmlnsPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public string Xmlns
        {
            get { return ((string) (base[XmlnsPropertyName])); }
        }

        #endregion

        #region IsReadOnly override

        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }

        #endregion

        #region TestRunners Property

        /// <summary>
        /// The XML name of the <see cref="TestRunners"/> property.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")] internal const string
            TestRunnersPropertyName = "testRunners";

        /// <summary>
        /// Gets or sets the TestRunners.
        /// </summary>
        [GeneratedCode("ConfigurationSectionDesigner.CsdFileGenerator", "1.6.1.0")]
        [Description("The TestRunners.")]
        [ConfigurationProperty(TestRunnersPropertyName, IsRequired = false, IsKey = false, IsDefaultCollection = false)]
        public RunnerConfigurations TestRunners
        {
            get { return ((RunnerConfigurations) (base[TestRunnersPropertyName])); }
            set { base[TestRunnersPropertyName] = value; }
        }

        #endregion
    }
}